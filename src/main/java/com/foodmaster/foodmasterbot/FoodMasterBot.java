package com.foodmaster.foodmasterbot;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.springframework.stereotype.Component;

import java.util.*;

@Component
public class FoodMasterBot extends TelegramLongPollingBot {

    private static final Map<String, Recipe> RECIPES = new HashMap<>();

    static {
        RECIPES.put("–û–º–ª–µ—Ç", new Recipe("–û–º–ª–µ—Ç", List.of("—è–π—Ü–∞", "–º–æ–ª–æ–∫–æ", "—Å–æ–ª—å"), "1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å –º–æ–ª–æ–∫–æ–º\n2. –î–æ–±–∞–≤—å—Ç–µ —Å–æ–ª—å\n3. –ñ–∞—Ä—å—Ç–µ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ"));
        RECIPES.put("–ü–∞—Å—Ç–∞", new Recipe("–ü–∞—Å—Ç–∞", List.of("–º–∞–∫–∞—Ä–æ–Ω—ã", "–ø–æ–º–∏–¥–æ—Ä—ã", "—Å—ã—Ä"), "1. –û—Ç–≤–∞—Ä–∏—Ç–µ –º–∞–∫–∞—Ä–æ–Ω—ã\n2. –°–¥–µ–ª–∞–π—Ç–µ —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å\n3. –ü–æ—Å—ã–ø—å—Ç–µ —Å—ã—Ä–æ–º"));
        RECIPES.put("–°–∞–ª–∞—Ç", new Recipe("–°–∞–ª–∞—Ç", List.of("–æ–≥—É—Ä—Ü—ã", "–ø–æ–º–∏–¥–æ—Ä—ã", "–º–∞—Å–ª–æ"), "1. –ù–∞—Ä–µ–∂—å—Ç–µ –æ–≤–æ—â–∏\n2. –ó–∞–ø—Ä–∞–≤—å—Ç–µ –º–∞—Å–ª–æ–º"));
    }

    @Override
    public String getBotUsername() {
        return "FoodMaster_MealMaster_bot";
    }

    @Override
    public String getBotToken() {
        return "7881995906:AAEXCt-6Xk3mB-Pf11hcrNiHWCfefXkyu2I";  // –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String userMessage = update.getMessage().getText().toLowerCase();

            if (userMessage.equals("/start")) {
                sendStartMenu(chatId);
            } else {
                findRecipesByIngredients(chatId, userMessage);
            }
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ /start
    private void sendStartMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *FoodMaster*!\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç:");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        keyboard.add(Collections.singletonList(createButton("üîç –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", "FIND_BY_INGREDIENTS")));
        keyboard.add(Collections.singletonList(createButton("üìñ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª —Ä–µ—Ü–µ–ø—Ç–æ–≤", "SHOW_ALL_RECIPES")));

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
    private void handleCallbackQuery(Update update) {
        String callbackData = update.getCallbackQuery().getData();
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();

        if (callbackData.equals("SHOW_ALL_RECIPES")) {
            showAllRecipes(chatId, messageId);
        } else if (callbackData.equals("FIND_BY_INGREDIENTS")) {
            deleteMessage(chatId, messageId);
            sendFindIngredientsPrompt(chatId);  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        } else if (callbackData.equals("BACK_TO_MAIN_MENU")) {
            deleteMessage(chatId, messageId); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendStartMenu(chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        } else if (callbackData.startsWith("RECIPE_")) {
            String recipeName = callbackData.replace("RECIPE_", "");
            sendRecipe(chatId, messageId, recipeName);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    private void deleteMessage(long chatId, int messageId) {
        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(String.valueOf(chatId));  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chatId –≤ String
        deleteMessage.setMessageId(messageId);            // messageId —É–∂–µ —Ç–∏–ø–∞ Integer

        try {
            execute(deleteMessage);  // –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    private void showAllRecipes(long chatId, int messageId) {
        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(chatId);
        editMessage.setMessageId(messageId);

        StringBuilder responseText = new StringBuilder("üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:*\n\n");
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (String recipeName : RECIPES.keySet()) {
            responseText.append("üçΩ ").append(recipeName).append("\n");
            keyboard.add(Collections.singletonList(createButton(recipeName, "RECIPE_" + recipeName)));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.add(Collections.singletonList(createButton("üîô –ù–∞–∑–∞–¥", "BACK_TO_MAIN_MENU")));

        keyboardMarkup.setKeyboard(keyboard);
        editMessage.setText(responseText.toString());
        editMessage.setReplyMarkup(keyboardMarkup);
        editMessage.enableMarkdown(true);

        try {
            execute(editMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –ø–æ –∫–Ω–æ–ø–∫–µ
    private void sendRecipe(long chatId, int messageId, String recipeName) {
        Recipe recipe = RECIPES.get(recipeName);
        if (recipe != null) {
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(chatId);
            editMessage.setMessageId(messageId);
            editMessage.setText("üìå *" + recipe.name + "*\n\n" + recipe.instructions);
            editMessage.enableMarkdown(true);

            try {
                execute(editMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }

    // –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
    // –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
    private void findRecipesByIngredients(long chatId, String userMessage) {
        List<String> userIngredients = Arrays.asList(userMessage.split(", "));

        List<Recipe> matchingRecipes = new ArrayList<>();
        Map<String, List<String>> missingIngredients = new HashMap<>();

        for (Recipe recipe : RECIPES.values()) {
            Set<String> commonIngredients = new HashSet<>(recipe.ingredients);
            commonIngredients.retainAll(userIngredients);  // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

            if (!commonIngredients.isEmpty()) {
                if (commonIngredients.size() < recipe.ingredients.size()) {
                    // –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                    List<String> missing = new ArrayList<>(recipe.ingredients);
                    missing.removeAll(userIngredients);
                    missingIngredients.put(recipe.name, missing);
                } else {
                    matchingRecipes.add(recipe);  // –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                }
            }
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId);

        if (matchingRecipes.isEmpty() && missingIngredients.isEmpty()) {
            message.setText("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ —ç—Ç–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë.");
        } else {
            StringBuilder responseText = new StringBuilder("–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n\n");
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã —Å –ø–æ–ª–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
            for (Recipe recipe : matchingRecipes) {
                responseText.append("‚úÖ ").append(recipe.name).append("\n");
                keyboard.add(Collections.singletonList(createButton(recipe.name, "RECIPE_" + recipe.name)));
            }

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
            for (Map.Entry<String, List<String>> entry : missingIngredients.entrySet()) {
                responseText.append("‚ö†Ô∏è ").append(entry.getKey()).append(" (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ").append(String.join(", ", entry.getValue())).append(")\n");
                keyboard.add(Collections.singletonList(createButton(entry.getKey(), "RECIPE_" + entry.getKey())));
            }

            message.setText(responseText.toString());
            keyboardMarkup.setKeyboard(keyboard);
            message.setReplyMarkup(keyboardMarkup);
        }

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ –ø–æ–∏—Å–∫–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    private void sendFindIngredientsPrompt(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —è–π—Ü–∞, –º–æ–ª–æ–∫–æ, —Å—ã—Ä).");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(Collections.singletonList(createButton("üîô –ù–∞–∑–∞–¥", "BACK_TO_MAIN_MENU")));
        keyboardMarkup.setKeyboard(keyboard);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private static class Recipe {
        String name;
        List<String> ingredients;
        String instructions;

        public Recipe(String name, List<String> ingredients, String instructions) {
            this.name = name;
            this.ingredients = ingredients;
            this.instructions = instructions;
        }
    }
}
