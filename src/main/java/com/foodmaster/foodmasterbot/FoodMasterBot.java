package com.foodmaster.foodmasterbot;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import java.io.File;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.*;

@Component
public class FoodMasterBot extends TelegramLongPollingBot {

    private final Map<Long, String> userStates = new HashMap<>();
    private final Map<Long, UserData> userDataMap = new HashMap<>();

    @Autowired
    private SpoonacularService spoonacularService;

    @Override
    public String getBotUsername() {
        return "FoodMaster_MealMaster_bot";
    }

    @Override
    public String getBotToken() {
        return "7881995906:AAEXCt-6Xk3mB-Pf11hcrNiHWCfefXkyu2I";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String userMessage = update.getMessage().getText().trim();

            if (userMessage.equalsIgnoreCase("/start")) {
                sendPhoto(chatId, "src/main/resources/static/images/FoodMaster.webp");
                sendStartMenu(chatId);
            } else {
                handleUserInput(chatId, userMessage);
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            int messageId = update.getCallbackQuery().getMessage().getMessageId();

            System.out.println("Received callback: " + callbackData);  // –ü–µ—á–∞—Ç–∞–µ–º callbackData

            if (callbackData.equals("CALCULATE_KBZU_NORM")) {
                askForHeight(chatId);
            } else if (callbackData.equals("GENDER_MALE") || callbackData.equals("GENDER_FEMALE")) {
                saveGender(chatId, callbackData);
            } else if (callbackData.startsWith("ACTIVITY_")) {
                saveActivityLevel(chatId, callbackData);
            } else if (callbackData.equals("CALCULATE_KBZU")) {
                // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£
                calculateKBZU(chatId);
            } else if (callbackData.equals("BACK_TO_MAIN_MENU")) {
                sendStartMenu(chatId);
            }
            if (callbackData.equals("RANDOM_RECIPE") || callbackData.equals("MORE_RECIPE")) {
                String recipeMessage = spoonacularService.getRandomRecipe();

                InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

                InlineKeyboardButton moreButton = new InlineKeyboardButton();
                moreButton.setText("üîÑ –ï—â–µ");
                moreButton.setCallbackData("MORE_RECIPE");

                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                backButton.setCallbackData("BACK_TO_MAIN_MENU");

                buttons.add(Collections.singletonList(moreButton));
                buttons.add(Collections.singletonList(backButton));

                markup.setKeyboard(buttons);

                sendMessageWithKeyboard(chatId, recipeMessage, markup);
            }
            if (callbackData.equals("SEARCH_RECIPE")) {
                String responseText = "üçΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:";

                // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
                InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

                // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
                String[] categories = {"–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω", "–î–µ—Å–µ—Ä—Ç—ã", "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ"};

                for (String category : categories) {
                    InlineKeyboardButton button = new InlineKeyboardButton();
                    button.setText(category);
                    button.setCallbackData("CATEGORY_" + category.toUpperCase()); // Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    rowsInline.add(Collections.singletonList(button));
                }

                markupInline.setKeyboard(rowsInline);

                // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText(responseText);
                message.setReplyMarkup(markupInline);

                try {
                    execute(message);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            } else if (callbackData.startsWith("CATEGORY_")) {
                String category = callbackData.replace("CATEGORY_", ""); // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                userStates.put(chatId, "AWAITING_DISH_NAME:" + category); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∂–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ

                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText("üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *" + category + "*:");
                message.enableMarkdown(true);

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                backButton.setCallbackData("BACK_TO_MAIN_MENU");

                InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                keyboardMarkup.setKeyboard(Collections.singletonList(Collections.singletonList(backButton)));

                message.setReplyMarkup(keyboardMarkup);

                try {
                    execute(message);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            } else if (callbackData.equals("TRY_AGAIN_BUTTON")) {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
                String responseMessage = "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:";

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥
                sendMessage(chatId, responseMessage);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
                userStates.put(chatId, "AWAITING_DISH_NAME:");
            }
            if (callbackData.equals("SEARCH_RECIPE_BY_TIME")) {
                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
                String responseText = "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:";

                InlineKeyboardMarkup markupInline = createTimeButtons();

                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText(responseText);
                message.setReplyMarkup(markupInline);

                try {
                    execute(message);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            } else if (callbackData.equals("TIME_15") || callbackData.equals("TIME_15_30") || callbackData.equals("TIME_30_45") || callbackData.equals("TIME_45_60") || callbackData.equals("TIME_60")) {
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                System.out.println("Selected time range: " + callbackData);  // –í—ã–≤–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                String recipes = spoonacularService.getRecipesByTime(callbackData);

                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText(recipes);

                InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                backButton.setCallbackData("BACK_TO_MAIN_MENU");

                keyboard.add(Collections.singletonList(backButton));
                inlineKeyboardMarkup.setKeyboard(keyboard);
                message.setReplyMarkup(inlineKeyboardMarkup);

                try {
                    execute(message);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            } if (callbackData.equals("SEARCH_BY_INGREDIENTS")) {
                String responseText = "üç≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—É—Ä–∏—Ü–∞, –ø–æ–º–∏–¥–æ—Ä—ã, —Ä–∏—Å):";

                sendMessage(chatId, responseText);

                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
                userStates.put(chatId, "AWAITING_INGREDIENTS");
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
    private InlineKeyboardMarkup createTimeButtons() {
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        String[] times = {"–î–æ 15 –º–∏–Ω—É—Ç", "15-30 –º–∏–Ω—É—Ç", "30-45 –º–∏–Ω—É—Ç", "45-60 –º–∏–Ω—É—Ç", "60 –º–∏–Ω—É—Ç –∏ –±–æ–ª—å—à–µ"};
        String[] callbackData = {"TIME_15", "TIME_15_30", "TIME_30_45", "TIME_45_60", "TIME_60"};

        for (int i = 0; i < times.length; i++) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(times[i]);  // –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            button.setCallbackData(callbackData[i]);  // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π callbackData
            rowsInline.add(Collections.singletonList(button));
        }

        markupInline.setKeyboard(rowsInline);
        return markupInline;
    }

    public void sendPhoto(Long chatId, String photoPath) {
        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(chatId.toString());
        sendPhoto.setPhoto(new InputFile(new File(photoPath))); // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª

        try {
            execute(sendPhoto);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void calculateKBZU(long chatId) {
        UserData userData = userDataMap.get(chatId);
        if (userData == null) {
            sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.");
            return;
        }

        // –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –ö–ë–ñ–£
        double bmr = 0;

        if ("–ú—É–∂—Å–∫–æ–π".equals(userData.getGender())) {
            bmr = 88.362 + (13.397 * userData.getWeight()) + (4.799 * userData.getHeight()) - (5.677 * userData.getAge());
        } else if ("–ñ–µ–Ω—Å–∫–∏–π".equals(userData.getGender())) {
            bmr = 447.593 + (9.247 * userData.getWeight()) + (3.098 * userData.getHeight()) - (4.330 * userData.getAge());
        }

        // –£—á–µ—Ç —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        double activityMultiplier = 1.2;  // –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        switch (userData.getActivityLevel()) {
            case "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
                activityMultiplier = 1.2;
                break;
            case "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
                activityMultiplier = 1.55;
                break;
            case "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
                activityMultiplier = 1.9;
                break;
        }

        // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ö–ë–ñ–£
        double totalKBZU = bmr * activityMultiplier;

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è –∏ –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã
        double caloriesToLoseWeight = totalKBZU - totalKBZU * 0.15; // 15% –¥–µ—Ñ–∏—Ü–∏—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
        double caloriesToGainWeight = totalKBZU + totalKBZU * 0.15; // 15% –∏–∑–±—ã—Ç–æ–∫ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        String resultMessage = String.format(
                "üìä –í–∞—à–∞ –Ω–æ—Ä–º–∞ –ö–ë–ñ–£:\n" +
                        "- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω (BMR): %.2f\n" +
                        "- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %s\n" +
                        "- –ò—Ç–æ–≥–æ: %.2f –∫–∫–∞–ª –≤ –¥–µ–Ω—å\n\n" +
                        "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º:**\n\n" +
                        "üçè **–ï—Å–ª–∏ –≤–∞—à–∞ —Ü–µ–ª—å ‚Äî –ø–æ—Ö—É–¥–µ–Ω–∏–µ:**\n" +
                        "–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π. –ß—Ç–æ–±—ã —Ç–µ—Ä—è—Ç—å –≤–µ—Å, –ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –æ–∫–æ–ª–æ %.2f –∫–∫–∞–ª –≤ –¥–µ–Ω—å. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –º–∞—Å—Å—ã.\n\n" +
                        "üçé **–ï—Å–ª–∏ –≤–∞—à–∞ —Ü–µ–ª—å ‚Äî –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã:**\n" +
                        "–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π. –ß—Ç–æ–±—ã –Ω–∞–±–∏—Ä–∞—Ç—å –º–∞—Å—Å—É, –ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –æ–∫–æ–ª–æ %.2f –∫–∫–∞–ª –≤ –¥–µ–Ω—å. –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∏–∑–±—ã—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞—à–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É –Ω–∞–±–∏—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É.\n\n",
                bmr, userData.getActivityLevel(), totalKBZU, caloriesToLoseWeight, caloriesToGainWeight
        );


        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        backButton.setCallbackData("BACK_TO_MAIN_MENU");
        buttons.add(Collections.singletonList(backButton));
        markup.setKeyboard(buttons);

        sendMessageWithKeyboard(chatId, resultMessage, markup);
    }


    private void sendMessageWithKeyboard(long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(keyboard);
        message.enableHtml(true); // –í–∫–ª—é—á–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void askForHeight(long chatId) {
        userStates.put(chatId, "AWAITING_HEIGHT");
        sendMessage(chatId, "üìç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175).");
    }

    private void askForWeight(long chatId) {
        userStates.put(chatId, "AWAITING_WEIGHT");
        sendMessage(chatId, "‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70).");
    }

    private void askForAge(long chatId) {
        userStates.put(chatId, "AWAITING_AGE");
        sendMessage(chatId, "üéÇ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25).");
    }

    private void askForGender(long chatId) {
        userStates.put(chatId, "AWAITING_GENDER");

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(Arrays.asList(
                createButton("‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π", "GENDER_MALE"),
                createButton("‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π", "GENDER_FEMALE")
        ));

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        sendMessage(message);
    }

    private void askForActivityLevel(long chatId) {
        userStates.put(chatId, "AWAITING_ACTIVITY_LEVEL");

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üèÉ‚Äç‚ôÄÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n" +
                "–ù—É–∂–Ω–æ —É—á–µ—Å—Ç—å –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. –ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —Å —É—á–µ—Ç–æ–º:\n\n" +
                "ü•â –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (—Å–∏–¥—è—á–∞—è), —Ä–µ–¥–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏.\n" +
                "ü•à –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π —Å–ø–æ—Ä—Ç.\n" +
                "ü•á –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –†–∞–±–æ—Ç–∞ –Ω–∞ –Ω–æ–≥–∞—Ö (8-12 —á–∞—Å–æ–≤), –ø–ª—é—Å 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π —Å–ø–æ—Ä—Ç. –ò–ª–∏, —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ —Å–ø–æ—Ä—Ç 5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(Arrays.asList(
                createButton("ü•â –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "ACTIVITY_LOW"),
                createButton("ü•à –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "ACTIVITY_MEDIUM"),
                createButton("ü•á –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "ACTIVITY_HIGH")
        ));

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        sendMessage(message);
    }

    private void saveActivityLevel(long chatId, String activity) {
        UserData userData = userDataMap.get(chatId);
        if (userData == null) return;

        switch (activity) {
            case "ACTIVITY_LOW":
                userData.setActivityLevel("ü•â –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
                break;
            case "ACTIVITY_MEDIUM":
                userData.setActivityLevel("ü•à –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
                break;
            case "ACTIVITY_HIGH":
                userData.setActivityLevel("ü•á –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
                break;
        }

        userDataMap.put(chatId, userData);
        sendFinalMessage(chatId);
    }


    private void handleUserInput(long chatId, String userMessage) {
        String state = userStates.get(chatId);

        if (state != null && state.equals("AWAITING_INGREDIENTS")) {
            String ingredients = userMessage.trim(); // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

            if (!ingredients.isEmpty()) {
                String recipes = spoonacularService.getRecipesByIngredients(ingredients); // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º

                if (recipes != null && !recipes.isEmpty()) {
                    // –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    sendMessageWithBackButton(chatId, recipes);
                } else {
                    // –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    sendMessageWithBackButton(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã —Å —Ç–∞–∫–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏.");
                }
            } else {
                sendMessageWithBackButton(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.");
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            userStates.remove(chatId);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
        if (state != null && state.startsWith("AWAITING_DISH_NAME:")) {
            String category = state.split(":")[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            String recipeMessage = spoonacularService.getRecipeByName(userMessage, category); // –ü–æ–∏—Å–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π

            if (recipeMessage != null && !recipeMessage.isEmpty()) {
                InlineKeyboardButton tryAgainButton = new InlineKeyboardButton();
                tryAgainButton.setText("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑");
                tryAgainButton.setCallbackData("TRY_AGAIN_BUTTON");

                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                backButton.setCallbackData("BACK_TO_MAIN_MENU");

                InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                keyboard.add(Collections.singletonList(tryAgainButton));
                keyboard.add(Collections.singletonList(backButton));
                keyboardMarkup.setKeyboard(keyboard);

                sendMessageWithKeyboard(chatId, recipeMessage, keyboardMarkup);
            }

            userStates.remove(chatId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
            return;
        }

        try {
            int value = Integer.parseInt(userMessage);
            UserData userData = userDataMap.getOrDefault(chatId, new UserData());

            if ("AWAITING_HEIGHT".equals(state)) {
                if (value >= 50 && value <= 250) {
                    userData.setHeight(value);
                    userDataMap.put(chatId, userData);
                    askForWeight(chatId);
                } else {
                    sendMessage(chatId, "‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 50-250 —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            } else if ("AWAITING_WEIGHT".equals(state)) {
                if (value >= 20 && value <= 300) {
                    userData.setWeight(value);
                    userDataMap.put(chatId, userData);
                    askForAge(chatId);
                } else {
                    sendMessage(chatId, "‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 20-300 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            } else if ("AWAITING_AGE".equals(state)) {
                if (value >= 5 && value <= 120) {
                    userData.setAge(value);
                    userDataMap.put(chatId, userData);
                    askForGender(chatId);
                } else {
                    sendMessage(chatId, "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 5-120 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
        }
    }


    private void saveGender(long chatId, String gender) {
        UserData userData = userDataMap.get(chatId);
        if (userData == null) return;

        userData.setGender(gender.equals("GENDER_MALE") ? "–ú—É–∂—Å–∫–æ–π" : "–ñ–µ–Ω—Å–∫–∏–π");
        userDataMap.put(chatId, userData);

        askForActivityLevel(chatId);
    }

    private void sendStartMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *FoodMaster*!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        keyboard.add(Collections.singletonList(createButton("üîç –ü–æ–∏—Å–∫ –±–ª—é–¥–∞", "SEARCH_RECIPE")));
        keyboard.add(Collections.singletonList(createButton("üç≥ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", "SEARCH_BY_INGREDIENTS")));
        keyboard.add(Collections.singletonList(createButton("‚è±Ô∏è –ù–∞–π—Ç–∏ –±–ª—é–¥–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "SEARCH_RECIPE_BY_TIME")));
        keyboard.add(Collections.singletonList(createButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", "RANDOM_RECIPE")));
        keyboard.add(Collections.singletonList(createButton("üìä –†–∞—Å—Å—á–µ—Ç –Ω–æ—Ä–º—ã –ö–ë–ñ–£", "CALCULATE_KBZU_NORM")));
        keyboard.add(Collections.singletonList(createButton("üç¥ –†–∞—Å—Å—á–µ—Ç –ö–ë–ñ–£ –±–ª—é–¥–∞", "CALCULATE_KBZU_RECIPE")));

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        message.enableMarkdown(true);

        sendMessage(message);
    }

    private void sendFinalMessage(long chatId) {
        UserData userData = userDataMap.get(chatId);
        if (userData == null) return;

        String result = String.format(
                "‚úÖ *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n" +
                        "- üìè –†–æ—Å—Ç: *%d —Å–º*\n" +
                        "- ‚öñÔ∏è –í–µ—Å: *%d –∫–≥*\n" +
                        "- üéÇ –í–æ–∑—Ä–∞—Å—Ç: *%d –ª–µ—Ç*\n" +
                        "- üë§ –ü–æ–ª: *%s*\n" +
                        "- üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *%s*\n\n" +
                        "üìä –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –Ω–æ—Ä–º—É –ö–ë–ñ–£!",
                userData.getHeight(), userData.getWeight(), userData.getAge(),
                userData.getGender(), userData.getActivityLevel()
        );

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(result);
        message.enableMarkdown(true);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(Collections.singletonList(createButton("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£", "CALCULATE_KBZU")));

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        sendMessage(message);
    }



    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        sendMessage(message);
    }

    private void sendMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private void sendMessageWithBackButton(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        backButton.setCallbackData("BACK_TO_MAIN_MENU");

        keyboard.add(Collections.singletonList(backButton));
        inlineKeyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(inlineKeyboardMarkup);

        executeMessage(message);
    }

    private void executeMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void deleteMessage(long chatId, int messageId) {
        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(String.valueOf(chatId));
        deleteMessage.setMessageId(messageId);

        try {
            execute(deleteMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
