package com.foodmaster.foodmasterbot;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.springframework.stereotype.Component;

import java.util.*;

@Component
public class FoodMasterBot extends TelegramLongPollingBot {

    private final Map<Long, String> userStates = new HashMap<>();
    private final Map<Long, UserData> userDataMap = new HashMap<>();

    @Override
    public String getBotUsername() {
        return "FoodMaster_MealMaster_bot";
    }

    @Override
    public String getBotToken() {
        return "7881995906:AAEXCt-6Xk3mB-Pf11hcrNiHWCfefXkyu2I";  // –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –¢–û–ö–ï–ù
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String userMessage = update.getMessage().getText().trim();

            if (userMessage.equalsIgnoreCase("/start")) {
                sendStartMenu(chatId);
            } else {
                handleUserInput(chatId, userMessage);
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            int messageId = update.getCallbackQuery().getMessage().getMessageId();

            if (callbackData.equals("CALCULATE_KBZU_NORM")) {
                askForHeight(chatId);
            } else if (callbackData.equals("GENDER_MALE") || callbackData.equals("GENDER_FEMALE")) {
                saveGender(chatId, callbackData);
            } else if (callbackData.startsWith("ACTIVITY_")) {
                saveActivityLevel(chatId, callbackData);
            }   else if (callbackData.equals("CALCULATE_KBZU")) {
                // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£
                calculateKBZU(chatId);
            }

        }
    }

    private void calculateKBZU(long chatId) {
        UserData userData = userDataMap.get(chatId);
        if (userData == null) {
            sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.");
            return;
        }

        // –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –ö–ë–ñ–£
        double bmr = 0;
        if ("–ú—É–∂—Å–∫–æ–π".equals(userData.getGender())) {
            bmr = 88.362 + (13.397 * userData.getWeight()) + (4.799 * userData.getHeight()) - (5.677 * userData.getAge());
        } else if ("–ñ–µ–Ω—Å–∫–∏–π".equals(userData.getGender())) {
            bmr = 447.593 + (9.247 * userData.getWeight()) + (3.098 * userData.getHeight()) - (4.330 * userData.getAge());
        }

        // –£—á–µ—Ç —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        double activityMultiplier = 1.2;  // –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        switch (userData.getActivityLevel()) {
            case "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
                activityMultiplier = 1.2;
                break;
            case "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
                activityMultiplier = 1.55;
                break;
            case "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
                activityMultiplier = 1.9;
                break;
        }

        // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ö–ë–ñ–£
        double totalKBZU = bmr * activityMultiplier;

        String resultMessage = String.format("üìä –í–∞—à–∞ –Ω–æ—Ä–º–∞ –ö–ë–ñ–£:\n- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω (BMR): %.2f\n- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %s\n- –ò—Ç–æ–≥–æ: %.2f –∫–∫–∞–ª –≤ –¥–µ–Ω—å", bmr, userData.getActivityLevel(), totalKBZU);
        sendMessage(chatId, resultMessage);
    }



    private void askForHeight(long chatId) {
        userStates.put(chatId, "AWAITING_HEIGHT");
        sendMessage(chatId, "üìç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175).");
    }

    private void askForWeight(long chatId) {
        userStates.put(chatId, "AWAITING_WEIGHT");
        sendMessage(chatId, "‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70).");
    }

    private void askForAge(long chatId) {
        userStates.put(chatId, "AWAITING_AGE");
        sendMessage(chatId, "üéÇ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25).");
    }

    private void askForGender(long chatId) {
        userStates.put(chatId, "AWAITING_GENDER");

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(Arrays.asList(
                createButton("‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π", "GENDER_MALE"),
                createButton("‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π", "GENDER_FEMALE")
        ));

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        sendMessage(message);
    }

    private void askForActivityLevel(long chatId) {
        userStates.put(chatId, "AWAITING_ACTIVITY_LEVEL");

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üèÉ‚Äç‚ôÄÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n" +
                "–ù—É–∂–Ω–æ —É—á–µ—Å—Ç—å –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. –ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —Å —É—á–µ—Ç–æ–º:\n\n" +
                "ü•â –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (—Å–∏–¥—è—á–∞—è), —Ä–µ–¥–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏.\n" +
                "ü•à –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π —Å–ø–æ—Ä—Ç.\n" +
                "ü•á –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –†–∞–±–æ—Ç–∞ –Ω–∞ –Ω–æ–≥–∞—Ö (8-12 —á–∞—Å–æ–≤), –ø–ª—é—Å 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π —Å–ø–æ—Ä—Ç. –ò–ª–∏, —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ —Å–ø–æ—Ä—Ç 5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(Arrays.asList(
                createButton("ü•â –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "ACTIVITY_LOW"),
                createButton("ü•à –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "ACTIVITY_MEDIUM"),
                createButton("ü•á –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "ACTIVITY_HIGH")
        ));

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        sendMessage(message);
    }

    private void saveActivityLevel(long chatId, String activity) {
        UserData userData = userDataMap.get(chatId);
        if (userData == null) return;

        switch (activity) {
            case "ACTIVITY_LOW":
                userData.setActivityLevel("ü•â –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
                break;
            case "ACTIVITY_MEDIUM":
                userData.setActivityLevel("ü•à –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
                break;
            case "ACTIVITY_HIGH":
                userData.setActivityLevel("ü•á –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
                break;
        }

        userDataMap.put(chatId, userData);
        sendFinalMessage(chatId);
    }


    private void handleUserInput(long chatId, String userMessage) {
        String state = userStates.get(chatId);

        try {
            int value = Integer.parseInt(userMessage);
            UserData userData = userDataMap.getOrDefault(chatId, new UserData());

            if ("AWAITING_HEIGHT".equals(state)) {
                if (value >= 50 && value <= 250) {
                    userData.setHeight(value);
                    userDataMap.put(chatId, userData);
                    askForWeight(chatId);
                } else {
                    sendMessage(chatId, "‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 50-250 —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            } else if ("AWAITING_WEIGHT".equals(state)) {
                if (value >= 20 && value <= 300) {
                    userData.setWeight(value);
                    userDataMap.put(chatId, userData);
                    askForAge(chatId);
                } else {
                    sendMessage(chatId, "‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 20-300 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            } else if ("AWAITING_AGE".equals(state)) {
                if (value >= 5 && value <= 120) {
                    userData.setAge(value);
                    userDataMap.put(chatId, userData);
                    askForGender(chatId);
                } else {
                    sendMessage(chatId, "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 5-120 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
        }
    }

    private void saveGender(long chatId, String gender) {
        UserData userData = userDataMap.get(chatId);
        if (userData == null) return;

        userData.setGender(gender.equals("GENDER_MALE") ? "–ú—É–∂—Å–∫–æ–π" : "–ñ–µ–Ω—Å–∫–∏–π");
        userDataMap.put(chatId, userData);

        askForActivityLevel(chatId);
    }

    private void sendStartMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *FoodMaster*!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        keyboard.add(Collections.singletonList(createButton("üîç –ü–æ–∏—Å–∫ –±–ª—é–¥–∞", "SEARCH_RECIPE")));
        keyboard.add(Collections.singletonList(createButton("üç≥ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", "SEARCH_BY_INGREDIENTS")));
        keyboard.add(Collections.singletonList(createButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", "RANDOM_RECIPE")));
        keyboard.add(Collections.singletonList(createButton("üìä –†–∞—Å—Å—á–µ—Ç –Ω–æ—Ä–º—ã –ö–ë–ñ–£", "CALCULATE_KBZU_NORM")));
        keyboard.add(Collections.singletonList(createButton("üç¥ –†–∞—Å—Å—á–µ—Ç –ö–ë–ñ–£ –±–ª—é–¥–∞", "CALCULATE_KBZU_RECIPE")));

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        message.enableMarkdown(true);

        sendMessage(message);
    }

    private void sendFinalMessage(long chatId) {
        UserData userData = userDataMap.get(chatId);
        if (userData == null) return;

        String result = String.format(
                "‚úÖ *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n" +
                        "- üìè –†–æ—Å—Ç: *%d —Å–º*\n" +
                        "- ‚öñÔ∏è –í–µ—Å: *%d –∫–≥*\n" +
                        "- üéÇ –í–æ–∑—Ä–∞—Å—Ç: *%d –ª–µ—Ç*\n" +
                        "- üë§ –ü–æ–ª: *%s*\n" +
                        "- üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *%s*\n\n" +
                        "üìä –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –Ω–æ—Ä–º—É –ö–ë–ñ–£!",
                userData.getHeight(), userData.getWeight(), userData.getAge(),
                userData.getGender(), userData.getActivityLevel()
        );

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(result);
        message.enableMarkdown(true);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(Collections.singletonList(createButton("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£", "CALCULATE_KBZU")));

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        sendMessage(message);
    }



    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        sendMessage(message);
    }

    private void sendMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private void deleteMessage(long chatId, int messageId) {
        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(String.valueOf(chatId));
        deleteMessage.setMessageId(messageId);

        try {
            execute(deleteMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
