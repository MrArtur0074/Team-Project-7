package com.foodmaster.foodmasterbot;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

@Service
public class SpoonacularService {
    private static final String API_KEY = "796d7a29558f465b9b7d0082ea6a39a4"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á API
    private static final String BASE_URL_RANDOM = "https://api.spoonacular.com/recipes/random";
    private static final String BASE_URL_SEARCH = "https://api.spoonacular.com/recipes/complexSearch";

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    public String getRandomRecipe() {
        try {
            String urlString = BASE_URL_RANDOM + "?apiKey=" + API_KEY;
            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            JSONObject jsonResponse = new JSONObject(response.toString());
            JSONArray recipes = jsonResponse.getJSONArray("recipes");

            if (recipes.length() > 0) {
                JSONObject recipe = recipes.getJSONObject(0);
                String title = recipe.getString("title");
                String recipeUrl = recipe.getString("sourceUrl");

                return String.format("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç:\n\n" +
                        "–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n" +
                        "–†–µ—Ü–µ–ø—Ç: %s\n", title, recipeUrl);
            } else {
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç.";
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞.";
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞
    public String getRecipeByName(String dishName, String category) {
        try {
            String urlString = BASE_URL_SEARCH + "?apiKey=" + API_KEY +
                    "&query=" + dishName + "&type=" + category + "&number=1";

            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            JSONObject jsonResponse = new JSONObject(response.toString());
            JSONArray results = jsonResponse.getJSONArray("results");

            if (results.length() > 0) {
                JSONObject recipe = results.getJSONObject(0);
                String title = recipe.getString("title");
                String recipeId = String.valueOf(recipe.getInt("id"));
                String recipeUrl = "https://spoonacular.com/recipes/" + title.replace(" ", "-") + "-" + recipeId;

                return String.format("üçΩ –†–µ—Ü–µ–ø—Ç –Ω–∞–π–¥–µ–Ω:\n\n" +
                        "–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n" +
                        "–†–µ—Ü–µ–ø—Ç: %s\n", title, recipeUrl);
            } else {
                return "‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.";
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞.";
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
    public String getRecipesByIngredients(String ingredients) {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
            String urlString = BASE_URL_SEARCH + "?apiKey=" + API_KEY +
                    "&includeIngredients=" + ingredients.replace(" ", ",") +
                    "&number=5"; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            JSONArray results = sendApiRequest(urlString).getJSONArray("results");

            // –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
            if (results.length() > 0) {
                StringBuilder recipesList = new StringBuilder("üçΩ –†–µ—Ü–µ–ø—Ç—ã —Å –≤–∞—à–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏:\n\n");

                // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
                for (int i = 0; i < results.length(); i++) {
                    JSONObject recipe = results.getJSONObject(i);
                    String title = recipe.getString("title");
                    int recipeId = recipe.getInt("id");
                    String recipeUrl = "https://spoonacular.com/recipes/" + title.replace(" ", "-") + "-" + recipeId;

                    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ —Å–ø–∏—Å–æ–∫
                    recipesList.append(String.format("‚Ä¢ %s\n  üîó –†–µ—Ü–µ–ø—Ç: %s\n\n", title, recipeUrl));
                }

                return recipesList.toString();
            } else {
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º.";
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.";
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    public String getRecipesByTime(String time) {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            String timeRange = "";
            switch (time) {
                case "TIME_15":
                    timeRange = "maxReadyTime=15";  // –î–æ 15 –º–∏–Ω—É—Ç
                    break;
                case "TIME_15_30":
                    timeRange = "maxReadyTime=30";  // 15-30 –º–∏–Ω—É—Ç
                    break;
                case "TIME_30_45":
                    timeRange = "maxReadyTime=45";  // 30-45 –º–∏–Ω—É—Ç
                    break;
                case "TIME_45_60":
                    timeRange = "maxReadyTime=60";  // 45-60 –º–∏–Ω—É—Ç
                    break;
                case "TIME_60":
                    timeRange = "minReadyTime=60";  // 60 –º–∏–Ω—É—Ç –∏ –±–æ–ª—å—à–µ
                    break;
                default:
                    return "‚ùå –í—Ä–µ–º—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.";
            }

            // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
            String searchUrl = BASE_URL_SEARCH + "?apiKey=" + API_KEY + "&" + timeRange + "&number=5";
            JSONArray results = sendApiRequest(searchUrl).getJSONArray("results");

            // –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
            if (results.length() > 0) {
                StringBuilder recipesList = new StringBuilder("üçΩ –†–µ—Ü–µ–ø—Ç—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:\n\n");

                // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é
                for (int i = 0; i < results.length(); i++) {
                    JSONObject recipe = results.getJSONObject(i);
                    String title = recipe.getString("title");
                    int recipeId = recipe.getInt("id");
                    String recipeUrl = "https://spoonacular.com/recipes/" + title.replace(" ", "-") + "-" + recipeId;

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ (–≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è)
                    int readyInMinutes = getRecipeTime(recipeId);

                    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Ä—É—á–Ω—É—é –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≤—Ä–µ–º–µ–Ω–∏
                    if (!isRecipeWithinTimeRange(readyInMinutes, time)) {
                        continue;  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—É –≤—Ä–µ–º–µ–Ω–∏
                    }

                    String timeText = (readyInMinutes != -1) ? readyInMinutes + " –º–∏–Ω" : "‚è≥ –í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

                    recipesList.append(String.format("‚Ä¢ %s (%s)\n  üîó –†–µ—Ü–µ–ø—Ç: %s\n\n", title, timeText, recipeUrl));
                }

                return recipesList.length() > 0 ? recipesList.toString() : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—Ä–µ–º–µ–Ω–∏.";
            } else {
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—Ä–µ–º–µ–Ω–∏.";
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.";
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    private boolean isRecipeWithinTimeRange(int readyInMinutes, String timeRange) {
        switch (timeRange) {
            case "TIME_15":
                return readyInMinutes <= 15;
            case "TIME_15_30":
                return readyInMinutes > 15 && readyInMinutes <= 30;
            case "TIME_30_45":
                return readyInMinutes > 30 && readyInMinutes <= 45;
            case "TIME_45_60":
                return readyInMinutes > 45 && readyInMinutes <= 60;
            case "TIME_60":
                return readyInMinutes >= 60;
            default:
                return false;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ü–µ–ø—Ç–µ
    private int getRecipeTime(int recipeId) {
        try {
            String infoUrl = "https://api.spoonacular.com/recipes/" + recipeId + "/information?apiKey=" + API_KEY;
            JSONObject recipeInfo = sendApiRequest(infoUrl);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ readyInMinutes
            return recipeInfo.has("readyInMinutes") ? recipeInfo.getInt("readyInMinutes") : -1;
        } catch (Exception e) {
            e.printStackTrace();
            return -1;  // –û—à–∏–±–∫–∞ –∏–ª–∏ –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API-–∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è JSON-–æ—Ç–≤–µ—Ç–∞
    private JSONObject sendApiRequest(String urlString) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        StringBuilder response = new StringBuilder();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();

        return new JSONObject(response.toString());
    }
}
