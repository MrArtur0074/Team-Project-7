package com.foodmaster.foodmasterbot.utils;

import com.foodmaster.foodmasterbot.model.UserData;
import com.foodmaster.foodmasterbot.service.SpoonacularService;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.springframework.stereotype.Component;

import java.util.*;

@Component
public class MessageUtils {

    private final SpoonacularService spoonacularService;
    private final BotExecutor botExecutor;

    public MessageUtils(SpoonacularService spoonacularService, BotExecutor botExecutor) {
        this.spoonacularService = spoonacularService;
        this.botExecutor = botExecutor;
    }

    public void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        executeMessage(message);
    }

    public void sendMessageWithKeyboard(long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(keyboard);
        message.enableMarkdown(true);
        executeMessage(message);
    }

    public void sendPhoto(Long chatId, InputFile photo) {
        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(chatId.toString());
        sendPhoto.setPhoto(photo);
        try {
            botExecutor.getBot().execute(sendPhoto);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendStartMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *FoodMaster*!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:");
        message.enableMarkdown(true);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –£–±–∏—Ä–∞–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
        keyboard.add(Collections.singletonList(createButton("üîç –ü–æ–∏—Å–∫ –±–ª—é–¥–∞", "SEARCH_RECIPE")));
        keyboard.add(Collections.singletonList(createButton("üç≥ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", "SEARCH_BY_INGREDIENTS")));
        keyboard.add(Collections.singletonList(createButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", "RANDOM_RECIPE")));
        keyboard.add(Collections.singletonList(createButton("üìä –†–∞—Å—Å—á–µ—Ç –Ω–æ—Ä–º—ã –ö–ë–ñ–£", "CALCULATE_KBZU_NORM")));
        keyboard.add(Collections.singletonList(createButton("üç¥ –†–∞—Å—Å—á–µ—Ç –ö–ë–ñ–£ –±–ª—é–¥–∞", "CALCULATE_KBZU_RECIPE")));

        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);

        executeMessage(message);
    }

    public void handleHelpCommand(long chatId) {
        String helpMessage = "üë®‚Äçüç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodMasterBot!\n" +
                "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞. –í–æ—Ç, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n" +
                "\n" +
                "1)–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º, –∫–∞–ª–æ—Ä–∏—è–º –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–æ–º.\n" +
                "\n" +
                "2)–ò—Å–∫–ª—é—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –ø–æ–∏—Å–∫–∞.\n" +
                "\n" +
                "3)–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n" +
                "\n" +
                "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ! –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!";

        sendMessage(chatId, helpMessage);
    }

    public void sendFinalMessage(long chatId, UserData data) {
        String result = String.format(
                "‚úÖ *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n" +
                        "- üìè –†–æ—Å—Ç: *%d —Å–º*\n" +
                        "- ‚öñÔ∏è –í–µ—Å: *%d –∫–≥*\n" +
                        "- üéÇ –í–æ–∑—Ä–∞—Å—Ç: *%d –ª–µ—Ç*\n" +
                        "- üë§ –ü–æ–ª: *%s*\n" +
                        "- üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *%s*\n\n" +
                        "üìä –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –Ω–æ—Ä–º—É –ö–ë–ñ–£!",
                data.getHeight(), data.getWeight(), data.getAge(),
                data.getGender(), data.getActivityLevel()
        );

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(createButton("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£", "CALCULATE_KBZU"))
        ));

        sendMessageWithKeyboard(chatId, result, markup);
    }

    public void sendKBZUResult(long chatId, UserData data) {
        double bmr = data.getGender().equals("–ú—É–∂—Å–∫–æ–π") ?
                88.362 + (13.397 * data.getWeight()) + (4.799 * data.getHeight()) - (5.677 * data.getAge()) :
                447.593 + (9.247 * data.getWeight()) + (3.098 * data.getHeight()) - (4.330 * data.getAge());

        double multiplier = switch (data.getActivityLevel()) {
            case "ü•à –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" -> 1.55;
            case "ü•á –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" -> 1.9;
            default -> 1.2;
        };

        double total = bmr * multiplier;
        double lose = total - total * 0.15;
        double gain = total + total * 0.15;

        String text = String.format(
                "üìä –í–∞—à–∞ –Ω–æ—Ä–º–∞ –ö–ë–ñ–£:\n" +
                        "- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω (BMR): %.2f\n" +
                        "- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %s\n" +
                        "- –ò—Ç–æ–≥–æ: %.2f –∫–∫–∞–ª –≤ –¥–µ–Ω—å\n\n" +
                        "üçè –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: %.2f –∫–∫–∞–ª/–¥–µ–Ω—å\n" +
                        "üçé –î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã: %.2f –∫–∫–∞–ª/–¥–µ–Ω—å",
                bmr, data.getActivityLevel(), total, lose, gain);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(createButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "BACK_TO_MAIN_MENU"))
        ));

        sendMessageWithKeyboard(chatId, text, markup);
    }

    public void requestPhoto(long chatId) {
        sendMessage(chatId, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞.");
    }

    public void sendGenderSelection(long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(createButton("‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π", "GENDER_MALE"), createButton("‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π", "GENDER_FEMALE"))
        ));
        sendMessageWithKeyboard(chatId, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", markup);
    }

    public void sendActivityLevelSelection(long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(createButton("ü•â –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "ACTIVITY_LOW")),
                List.of(createButton("ü•à –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "ACTIVITY_MEDIUM")),
                List.of(createButton("ü•á –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "ACTIVITY_HIGH"))
        ));
        sendMessageWithKeyboard(chatId, "üèÉ‚Äç‚ôÄÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", markup);
    }

    public void sendCategorySelection(long chatId) {
        String[] categories = {"–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω", "–î–µ—Å–µ—Ä—Ç—ã", "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ"};
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (String cat : categories) {
            rows.add(Collections.singletonList(createButton(cat, "CATEGORY_" + cat.toUpperCase())));
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        sendMessageWithKeyboard(chatId, "üçΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:", markup);
    }

    public void sendDishResult(long chatId, String recipe) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(createButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "TRY_AGAIN_BUTTON")),
                List.of(createButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "BACK_TO_MAIN_MENU"))
        ));

        sendMessageWithKeyboard(chatId, recipe, markup);
    }

    public void askForDishName(long chatId, String category) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(createButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "BACK_TO_MAIN_MENU"))
        ));
        sendMessageWithKeyboard(chatId, "üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *" + category + "*:", markup);
    }

    public void sendTimeSelection(long chatId) {
        String[] labels = {"–î–æ 15 –º–∏–Ω—É—Ç", "15-30 –º–∏–Ω—É—Ç", "30-45 –º–∏–Ω—É—Ç", "45-60 –º–∏–Ω—É—Ç", "60 –º–∏–Ω—É—Ç –∏ –±–æ–ª—å—à–µ"};
        String[] callbacks = {"TIME_15", "TIME_15_30", "TIME_30_45", "TIME_45_60", "TIME_60"};
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (int i = 0; i < labels.length; i++) {
            rows.add(Collections.singletonList(createButton(labels[i], callbacks[i])));
        }
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);
        sendMessageWithKeyboard(chatId, "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:", markup);
    }

    public InlineKeyboardMarkup createMoreBackKeyboard() {
        InlineKeyboardButton more = createButton("üîÑ –ï—â–µ", "MORE_RECIPE");
        InlineKeyboardButton back = createButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "BACK_TO_MAIN_MENU");
        return new InlineKeyboardMarkup(List.of(List.of(more), List.of(back)));
    }

    public InlineKeyboardButton createButton(String text, String data) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(data);
        return button;
    }

    public SpoonacularService getSpoonacularService() {
        return spoonacularService;
    }

    private void executeMessage(SendMessage message) {
        try {
            botExecutor.getBot().execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void deleteMessage(long chatId, int messageId) {
        DeleteMessage delete = new DeleteMessage();
        delete.setChatId(String.valueOf(chatId));
        delete.setMessageId(messageId);
        try {
            botExecutor.getBot().execute(delete);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public String getFileUrl(String fileId) {
        try {
            GetFile getFile = new GetFile();
            getFile.setFileId(fileId);
            File file = botExecutor.getBot().execute(getFile);
            return file.getFileUrl(botExecutor.getBot().getBotToken());
        } catch (TelegramApiException e) {
            e.printStackTrace();
            return null;
        }
    }
}
